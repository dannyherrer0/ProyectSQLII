-- ====================================================
-- SUBCONSULTAS 
-- ====================================================
-- 1. Productos cuyo precio esté por encima del promedio de su categoría
SELECT p.name AS product_name,
       cp.price,
       cat.description AS category,
       (SELECT AVG(cp2.price) 
        FROM companyproducts cp2 
        JOIN products p2 ON cp2.product_id = p2.id 
        WHERE p2.category_id = p.category_id) AS category_avg_price
FROM products p
JOIN companyproducts cp ON p.id = cp.product_id
JOIN categories cat ON p.category_id = cat.id
WHERE cp.price > (
    SELECT AVG(cp2.price) 
    FROM companyproducts cp2 
    JOIN products p2 ON cp2.product_id = p2.id 
    WHERE p2.category_id = p.category_id
)
ORDER BY cat.description, cp.price DESC;

-- 2. Empresas que tienen más productos que la media
SELECT c.name AS company_name,
       COUNT(cp.product_id) AS product_count,
       (SELECT AVG(product_count) 
        FROM (SELECT COUNT(cp2.product_id) AS product_count 
              FROM companyproducts cp2 
              GROUP BY cp2.company_id) AS avg_calc) AS average_products
FROM companies c
JOIN companyproducts cp ON c.id = cp.company_id
GROUP BY c.id
HAVING COUNT(cp.product_id) > (
    SELECT AVG(product_count) 
    FROM (SELECT COUNT(cp2.product_id) AS product_count 
          FROM companyproducts cp2 
          GROUP BY cp2.company_id) AS avg_calc
)
ORDER BY product_count DESC;

-- 3. Productos favoritos que han sido calificados por otros clientes
SELECT p.name AS product_name,
       c.name AS customer_name,
       COUNT(r.id) AS other_ratings
FROM products p
JOIN details_favorites df ON p.id = df.product_id
JOIN favorites f ON df.favorite_id = f.id
JOIN customers c ON f.customer_id = c.id
JOIN rates r ON p.id = r.product_id
WHERE r.customer_id != c.id
GROUP BY p.id, c.id
ORDER BY other_ratings DESC;

-- 4. Productos con mayor número de veces añadidos como favoritos
SELECT p.name AS product_name,
       COUNT(df.id) AS favorite_count
FROM products p
JOIN details_favorites df ON p.id = df.product_id
GROUP BY p.id
HAVING COUNT(df.id) = (
    SELECT MAX(fav_count) 
    FROM (SELECT COUNT(df2.id) AS fav_count 
          FROM details_favorites df2 
          GROUP BY df2.product_id) AS max_fav
)
ORDER BY favorite_count DESC;

-- 5. Clientes cuyo correo no aparece en rates ni en quality_products
SELECT c.name AS customer_name,
       c.email
FROM customers c
WHERE c.email NOT IN (
    SELECT DISTINCT cu.email 
    FROM customers cu 
    JOIN rates r ON cu.id = r.customer_id 
    WHERE cu.email IS NOT NULL
)
AND c.email NOT IN (
    SELECT DISTINCT cu.email 
    FROM customers cu 
    JOIN quality_products qp ON cu.id = qp.customer_id 
    WHERE cu.email IS NOT NULL
)
AND c.email IS NOT NULL
ORDER BY c.name;

-- 6. Productos con calificación inferior al mínimo de su categoría
SELECT p.name AS product_name,
       AVG(r.rating) AS avg_rating,
       cat.description AS category
FROM products p
JOIN rates r ON p.id = r.product_id
JOIN categories cat ON p.category_id = cat.id
GROUP BY p.id
HAVING AVG(r.rating) < (
    SELECT MIN(category_min) 
    FROM (SELECT MIN(r2.rating) AS category_min 
          FROM rates r2 
          JOIN products p2 ON r2.product_id = p2.id 
          WHERE p2.category_id = p.category_id) AS min_calc
)
ORDER BY avg_rating;

-- 7. Ciudades que no tienen clientes registrados
SELECT cm.name AS city_name
FROM citiesormunicipalities cm
WHERE cm.code NOT IN (
    SELECT DISTINCT city_id 
    FROM customers 
    WHERE city_id IS NOT NULL
)
ORDER BY cm.name;

-- 8. Productos que no han sido evaluados en ninguna encuesta
SELECT p.name AS product_name,
       cat.description AS category
FROM products p
JOIN categories cat ON p.category_id = cat.id
WHERE p.id NOT IN (
    SELECT DISTINCT product_id 
    FROM rates 
    WHERE poll_id IS NOT NULL
)
ORDER BY p.name;

-- 9. Beneficios que no están asignados a ninguna audiencia
SELECT b.description AS benefit_description,
       b.detail AS benefit_detail
FROM benefits b
WHERE b.id NOT IN (
    SELECT DISTINCT benefit_id 
    FROM audiencebenefits
)
ORDER BY b.description;

-- 10. Productos favoritos que no están disponibles en ninguna empresa
SELECT p.name AS product_name,
       c.name AS customer_name
FROM products p
JOIN details_favorites df ON p.id = df.product_id
JOIN favorites f ON df.favorite_id = f.id
JOIN customers c ON f.customer_id = c.id
WHERE p.id NOT IN (
    SELECT DISTINCT product_id 
    FROM companyproducts 
    WHERE status = 'ACTIVE'
)
ORDER BY p.name;

-- 11. Productos vendidos en empresas con menos de tres empresas en la ciudad
SELECT p.name AS product_name,
       c.name AS company_name,
       cm.name AS city_name
FROM products p
JOIN companyproducts cp ON p.id = cp.product_id
JOIN companies c ON cp.company_id = c.id
JOIN citiesormunicipalities cm ON c.city_id = cm.code
WHERE cm.code IN (
    SELECT city_id 
    FROM companies 
    GROUP BY city_id 
    HAVING COUNT(*) < 3
)
ORDER BY cm.name, p.name;

-- 12. Productos con calidad superior al promedio
SELECT p.name AS product_name,
       AVG(qp.quality_score) AS avg_quality,
       (SELECT AVG(quality_score) FROM quality_products) AS general_avg
FROM products p
JOIN quality_products qp ON p.id = qp.product_id
GROUP BY p.id
HAVING AVG(qp.quality_score) > (
    SELECT AVG(quality_score) FROM quality_products
)
ORDER BY avg_quality DESC;

-- 13. Empresas que solo venden productos de una única categoría
SELECT c.name AS company_name,
       cat.description AS category
FROM companies c
JOIN companyproducts cp ON c.id = cp.company_id
JOIN products p ON cp.product_id = p.id
JOIN categories cat ON p.category_id = cat.id
GROUP BY c.id
HAVING COUNT(DISTINCT p.category_id) = 1
ORDER BY c.name;

-- 14. Productos con el mayor precio entre todas las empresas
SELECT p.name AS product_name,
       MAX(cp.price) AS max_price
FROM products p
JOIN companyproducts cp ON p.id = cp.product_id
GROUP BY p.id
HAVING MAX(cp.price) = (
    SELECT MAX(price) FROM companyproducts
)
ORDER BY max_price DESC;

-- 15. Productos favoritos calificados por otro cliente con más de 4 estrellas
SELECT p.name AS product_name,
       c.name AS customer_name,
       r.rating AS other_rating
FROM products p
JOIN details_favorites df ON p.id = df.product_id
JOIN favorites f ON df.favorite_id = f.id
JOIN customers c ON f.customer_id = c.id
JOIN rates r ON p.id = r.product_id
WHERE r.customer_id != c.id 
AND r.rating > 4
ORDER BY p.name, r.rating DESC;

-- 16. Productos sin imagen asignada pero calificados
SELECT p.name AS product_name,
       COUNT(r.id) AS rating_count
FROM products p
JOIN rates r ON p.id = r.product_id
WHERE p.image IS NULL
GROUP BY p.id
ORDER BY rating_count DESC;

-- 17. Planes de membresía sin periodo vigente
SELECT m.name AS membership_name,
       m.description
FROM memberships m
WHERE m.id NOT IN (
    SELECT DISTINCT membership_id 
    FROM membershipperiods 
    WHERE status = 'ACTIVE'
)
ORDER BY m.name;

-- 18. Beneficios compartidos por más de una audiencia
SELECT b.description AS benefit_description,
       COUNT(ab.audience_id) AS audience_count
FROM benefits b
JOIN audiencebenefits ab ON b.id = ab.benefit_id
GROUP BY b.id
HAVING COUNT(ab.audience_id) > 1
ORDER BY audience_count DESC;

-- 19. Empresas cuyos productos no tienen unidad de medida definida
SELECT c.name AS company_name,
       p.name AS product_name
FROM companies c
JOIN companyproducts cp ON c.id = cp.company_id
JOIN products p ON cp.product_id = p.id
WHERE p.unit_id IS NULL
ORDER BY c.name, p.name;

-- 20. Clientes con membresía activa y sin productos favoritos
SELECT c.name AS customer_name,
       m.name AS membership_name
FROM customers c
JOIN membershipperiods mp ON c.id = mp.customer_id
JOIN memberships m ON mp.membership_id = m.id
WHERE mp.status = 'ACTIVE'
AND c.id NOT IN (
    SELECT DISTINCT customer_id 
    FROM favorites
)
ORDER BY c.name;
